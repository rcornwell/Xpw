.\" $Id$
.\"
.\"
.\" Copyright 1997 Richard P. Cornwell All Rights Reserved,
.\"
.\" The software is provided "as is", without warranty of any kind, express
.\" or implied, including but not limited to the warranties of
.\" merchantability, fitness for a particular purpose and non-infringement.
.\" In no event shall Richard Cornwell be liable for any claim, damages
.\" or other liability, whether in an action of contract, tort or otherwise,
.\" arising from, out of or in connection with the software or the use or other
.\" dealings in the software.
.\"
.\" Permission to use, copy, and distribute this software and its
.\" documentation for non commercial use is hereby granted,
.\" provided that the above copyright notice appear in all copies and that
.\" both that copyright notice and this permission notice appear in
.\" supporting documentation.
.\"
.\" The sale, resale, or use of this library for profit without the
.\" express written consent of the author Richard Cornwell is forbidden.
.\" Please see attached License file for information about using this
.\" library in commercial applications, or for commercial software distribution.
.\"
.TH Canvas 3Xpw "2 October 97"
.UC 4
.SH NAME
Canvas\- Widget Class.
.SH SYNOPSIS
.TA 2.0i 
.ta 2.0i
.LP
Class name:     CanvasWidget
.br
Class pointer:  canvasWidgetClass
.br
Class hierarchy:        canvasWidgetClass \(-> Core
.P
.nf
.B #include <X11/Xpw/Canvas.h>
.LP
.B canvasWidget = XtCreateWidget( \(lqcanvas\(rq, canvasWidgetClass, ...)
.LP
.fi
.SH DESCRIPTION
.LP
The \fICanvasWidget\fR provides a drawing area and provides callbacks for
expose, resize and convience hooks for mouse and other events.
.SH RESOURCES
.P
.sp
.TA 2.0i 3.5i 4.0i
.ta 2.0i 3.5i 4.0i 
.BR actionCallback	Callback	None
.P 
Action hook callback. Requires setting new translations to make work.
.P
.BR resizeCallback	Callback	None
.P
Whenever window is resized this callback is executed.
.P
.BR resizePolicy	CanvasResizePolicy	Any
.P
Controls the behaviour of Canvaswidget to resize requests.
\fIAny\fR allows for any changes, \fINone\fR refuses any changes, and
\fIGrow\fR only allows for request which will make window bigger.
.P
.BR exposeCallback	Callback	None
.P
Whenever a expose even happens, this callback is executed.
.P
.BR clue		Label		None
.P
Place for popup clue. 
.SH "CALLBACK DATA"
.P
All callbacks use the same structure. \fIReason\fR can be either 
\fIXpwCanvasResize\fR for a resize event, \fIfIXpwCanvasExpose\fR
for a expose event. \fIEvent\fR is the event pointer passed to widget.
.nf
typedef struct _XpwCanvasCallbackData {
  int   reason;                 /* Reason for call back */
  XEvent *event;                /* the event causing the CanvasAction */
  Window window;                /* Window widget is on */
  String *params;               /* the TranslationTable params */
  Cardinal num_params;          /* count of params */
} XpwCanvasCallbackDataRec, *XpwCanvasCallbackData;
.fi
.SH "ACTIONS"
.P
\fICanvasWidget\fR defines three actions: \fIEnter\fR for window entry, 
\fIEnter\fR arms the clue popup. \fILeave\fR for window leave, \fILeave\fR
disarms the popup clue. \fICanvasAction\fR calls back the application with
\fIactionCallback\fR with the event, and parameters passed.
.P
.SH "CONVENIENCE ROUTINES"
.P
None
.P
.SH AUTHOR
Richard Cornwell
